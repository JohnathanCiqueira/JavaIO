<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Build and Deploy Containerized Java Batch Applications on OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/cebexgJ8joo/build-and-deploy-containerized-java-batch-applications-on-openshift" /><category term="feed_group_name_jberet" scheme="searchisko:content:tags" /><category term="feed_name_jberet" scheme="searchisko:content:tags" /><category term="jberet" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Cheng Fang</name></author><id>searchisko:content:id:jbossorg_blog-build_and_deploy_containerized_java_batch_applications_on_openshift</id><updated>2018-09-18T02:47:33Z</updated><published>2018-09-18T02:47:33Z</published><content type="html">&lt;!-- [DocumentBodyStart:86a98098-d31e-4faa-b426-9403a4a67c60] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;h2&gt;Introduction&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;When migrating Java batch applications to cloud platforms such as OpenShift, there are different approaches how to build and containerize traditional applications.&amp;#160; Recall that JSR-352-based Java batch applications can be developed and run in either Java SE or Java EE (now &lt;a class="jive-link-external-small" href="https://jakarta.ee/" rel="nofollow"&gt;Jakarta EE&lt;/a&gt;) environment.&amp;#160; So if your existing Java batch applications are Java EE web or enterprise applications deployed to application servers like WildFly, then you would build the new cloud batch applications based on OpenShift WildFly image streams and run it WildFly runtime on OpenShift.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;If you've chosen to develop and run your existing Java batch applications as light-weight standalone Java SE applications, it's also easy to migrate to OpenShift using openjdk image steams and runtime.&amp;#160; This is what we will be exploring in this blog post to help JBeret users better understand the concepts and steps it takes to modernize batch applications.&amp;#160; OpenShift provides a Java S2I (source-to-image) builder process that handles everything from building application source code, injecting application to the base image, publishing to OpenShift image registry, and readying the application for execution.&amp;#160; A JBeret sample batch application, &lt;a class="jive-link-external-small" href="https://github.com/jberet/jberet-simple" rel="nofollow"&gt;jberet-simple&lt;/a&gt;, will be used to illustrate each step.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Set up, Build and Run Sample Batch Application the Traditional Way&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;First, let's see how to build and run the sample application the traditionaly way locally, and familiarize ourselves with the application structure and batch job.&amp;#160; jberet-simple is a simple standalone Java SE batch processing application and contains a single batch job as defined in simple.xml.&amp;#160; This batch job contains a single chunk-type step that reads a list of numbers by chunks and prints them to the console. The 2 batch artifacts used in this application are:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://github.com/jberet/jberet-support/blob/master/src/main/java/org/jberet/support/io/ArrayItemReader.java" rel="nofollow"&gt;arrayItemReader&lt;/a&gt;: implemented in &lt;a class="jive-link-external-small" href="https://github.com/jberet/jberet-support" rel="nofollow"&gt;jberet-support&lt;/a&gt;, reads a list of objects configured in job xml&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://github.com/jberet/jberet-support/blob/master/src/main/java/org/jberet/support/io/MockItemWriter.java" rel="nofollow"&gt;mockItemWriter&lt;/a&gt;: implemented in &lt;a class="jive-link-external-small" href="https://github.com/jberet/jberet-support" rel="nofollow"&gt;jberet-support&lt;/a&gt;, writes the output to the console or other destinations&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;For complete batch job definition, see the JSL file &lt;a class="jive-link-external-small" href="https://github.com/jberet/jberet-simple/blob/master/src/main/resources/META-INF/batch-jobs/simple.xml" rel="nofollow"&gt;simple.xml&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To git-clone the sample application from github:&lt;/p&gt;&lt;!--[CodeBlockStart:119570e8-a803-430d-979a-0fe9044859a9][excluded]--&gt;&lt;pre class="plain" name="code"&gt;git clone https://github.com/jberet/jberet-simple.git&lt;/pre&gt;&lt;!--[CodeBlockEnd:119570e8-a803-430d-979a-0fe9044859a9]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To build the sample application with Maven, including running the integration test:&lt;/p&gt;&lt;!--[CodeBlockStart:3f680f8b-18ff-4d4d-9533-3b4501042330][excluded]--&gt;&lt;pre class="plain" name="code"&gt;mvn clean install&lt;/pre&gt;&lt;!--[CodeBlockEnd:3f680f8b-18ff-4d4d-9533-3b4501042330]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To run the integration test that starts the batch job:&lt;/p&gt;&lt;!--[CodeBlockStart:302f6ccf-08f6-4423-b04c-b9208522b6d7][excluded]--&gt;&lt;pre class="plain" name="code"&gt;mvn integration-test&lt;/pre&gt;&lt;!--[CodeBlockEnd:302f6ccf-08f6-4423-b04c-b9208522b6d7]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To run application main class with maven exec plugin, execute any of the following mvn commands:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:a06ade4c-af8a-4d5e-b27b-4e4d176a485f][excluded]--&gt;&lt;pre class="plain" name="code"&gt;# run with the default configuration in pom.xml mvn exec:java # run with job xml mvn exec:java -Dexec.arguments="simplxe.xml" # run with job xml and job parameters mvn exec:java -Dexec.arguments="simple.xml jobParam1=x jobParam2=y jobParam3=z"&lt;/pre&gt;&lt;!--[CodeBlockEnd:a06ade4c-af8a-4d5e-b27b-4e4d176a485f]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To build&amp;#160; the application as an executable uber jar (fat jar) and run it directly with java -jar command:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:e6545a74-8247-4a62-90d2-85b9fa5b6d25][excluded]--&gt;&lt;pre class="plain" name="code"&gt;mvn clean install -Popenshift java -jar target/jberet-simple.jar simple.xml jobParam1=x jobParam2=y&lt;/pre&gt;&lt;!--[CodeBlockEnd:e6545a74-8247-4a62-90d2-85b9fa5b6d25]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Note that in the above command, a maven profile named openshift is used.&amp;#160; This profile tells maven to build the uber jar to include everything needed to run the application.&amp;#160; When openshift profile is present, it will be picked up by OpenShift S2I builder process instead of the default profile.&amp;#160; Of course, this profie can also be invoked manually as we just did above.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Build Application Images and Deploy to OpenShift&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Next, let's delve into how to run jberet-simple application on OpenShift.&amp;#160; Since this is a standalone Java SE application, OpenShift will need to enlist a Java SE runtime, and here we choose to use openjdk18.&amp;#160; All the operations we will be performing can be done via either OpenShift command line tool (oc), or OpenShift Web Console.&amp;#160; For the sake of brevity, we will use oc commands.&amp;#160; For introduction to various features in OpenShift, you may want to check out &lt;a class="jive-link-external-small" href="https://learn.openshift.com/" rel="nofollow"&gt;OpenShift interactive tutorials&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;We assume you already have an OpenShift account, and to log in:&lt;/p&gt;&lt;!--[CodeBlockStart:395e27c6-f342-4bfb-ae2e-53868fe5dedb][excluded]--&gt;&lt;pre class="plain" name="code"&gt;oc login https:xxx.openshift.com --token=xxx&lt;/pre&gt;&lt;!--[CodeBlockEnd:395e27c6-f342-4bfb-ae2e-53868fe5dedb]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To create a new project, if there is no existing projects:&lt;/p&gt;&lt;!--[CodeBlockStart:0f59bd28-0676-4fdb-88c8-102e694e9ecd][excluded]--&gt;&lt;pre class="plain" name="code"&gt;oc new-project &lt;/pre&gt;&lt;!--[CodeBlockEnd:0f59bd28-0676-4fdb-88c8-102e694e9ecd]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;We wil use openjdk18-openshift image stream. Check if it is available in the current project:&lt;/p&gt;&lt;!--[CodeBlockStart:58f3e12e-4f76-4ac5-8ca7-4d33721706ab][excluded]--&gt;&lt;pre class="plain" name="code"&gt;oc get is&lt;/pre&gt;&lt;!--[CodeBlockEnd:58f3e12e-4f76-4ac5-8ca7-4d33721706ab]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;If openjdk18-openshift is not present, import it:&lt;/p&gt;&lt;!--[CodeBlockStart:93d0b6e6-2695-4a2f-a6e4-6ee01372c4d7][excluded]--&gt;&lt;pre class="plain" name="code"&gt;oc import-image my-redhat-openjdk-18/openjdk18-openshift --from=registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift --confirm&lt;/pre&gt;&lt;!--[CodeBlockEnd:93d0b6e6-2695-4a2f-a6e4-6ee01372c4d7]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;to create a new application (with default name):&lt;/p&gt;&lt;!--[CodeBlockStart:0bc07f39-06be-493f-b4d5-bd49988df3a4][excluded]--&gt;&lt;pre class="plain" name="code"&gt;oc new-app openjdk18-openshift~https://github.com/jberet/jberet-simple.git&lt;/pre&gt;&lt;!--[CodeBlockEnd:0bc07f39-06be-493f-b4d5-bd49988df3a4]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Or to create a new application with custom name, if the default name doesn't fit:&lt;/p&gt;&lt;!--[CodeBlockStart:996c936a-7849-460e-b3e1-8412776a1261][excluded]--&gt;&lt;pre class="plain" name="code"&gt;oc new-app openjdk18-openshift~https://github.com/jberet/jberet-simple.git --name=hello-batch&lt;/pre&gt;&lt;!--[CodeBlockEnd:996c936a-7849-460e-b3e1-8412776a1261]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The above new-app command takes a while to complete.&amp;#160; To check its status:&lt;/p&gt;&lt;!--[CodeBlockStart:5f904305-6bfb-411f-bca4-39d74223898f][excluded]--&gt;&lt;pre class="plain" name="code"&gt;oc status&lt;/pre&gt;&lt;!--[CodeBlockEnd:5f904305-6bfb-411f-bca4-39d74223898f]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To list pods, and get logs for the pod associated with the application (replace jberet-simple-1-kpvqn with your pod name):&lt;/p&gt;&lt;!--[CodeBlockStart:dd40485f-d536-405b-94c8-6f5614561306][excluded]--&gt;&lt;pre class="plain" name="code"&gt;oc get pods oc logs jberet-simple-1-kpvqn&lt;/pre&gt;&lt;!--[CodeBlockEnd:dd40485f-d536-405b-94c8-6f5614561306]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;table&gt;&lt;tbody&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;From the above log output, you can see that the application has been successfully built, deployed to OpenShift online, and batch job executed.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Launch a Job Execution from OpenShift Command Line&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;By now we've successfully built, deployed to OpenShift and started the batch job execution.&amp;#160; You want want to run it again later as needed, and this can be easily done with OpenShift command line with oc client tool and Kubernetes job api.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;First, create a yaml file to describe how OpenShift should run the batch application.&amp;#160; For example, I created the following file, simple.yaml, to launch the batch application (replace container image value to the appropriate one in your OpenShift environment):&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:270a8004-46da-4f59-9467-35fa8b53d688][excluded]--&gt;&lt;pre class="javascript" name="code"&gt;apiVersion: batch/v1 kind: Job metadata: &amp;#160; name: simple spec: &amp;#160; parallelism: 1 &amp;#160; completions: 1 &amp;#160; template: &amp;#160;&amp;#160;&amp;#160; metadata: &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; name: simple &amp;#160;&amp;#160;&amp;#160; spec: &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; containers: &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; - name: jberet-simple &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; image: docker-registry.default.svc:5000/pr/jberet-simple &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; command: ["java",&amp;#160; "-jar", "/deployments/jberet-simple.jar", "simple.xml", "jobParam1=x", "jobParam2=y"] &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; restartPolicy: OnFailure&lt;/pre&gt;&lt;!--[CodeBlockEnd:270a8004-46da-4f59-9467-35fa8b53d688]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Then, run the following command to tell OpenShift to launch the job execution:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:8a2a7b47-55b7-4a15-bf7f-24a75dc01ae8][excluded]--&gt;&lt;pre class="plain" name="code"&gt;$ oc create -f simple.yaml job.batch "simple" created&lt;/pre&gt;&lt;!--[CodeBlockEnd:8a2a7b47-55b7-4a15-bf7f-24a75dc01ae8]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To list Kubernetes jobs:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:cabc86fa-5a50-437a-b6f6-fc99591a08e6][excluded]--&gt;&lt;pre class="plain" name="code"&gt;$ oc get jobs NAME&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; DESIRED&amp;#160;&amp;#160; SUCCESSFUL&amp;#160;&amp;#160; AGE simple&amp;#160;&amp;#160;&amp;#160; 1&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 1&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 12m&lt;/pre&gt;&lt;!--[CodeBlockEnd:cabc86fa-5a50-437a-b6f6-fc99591a08e6]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To list pods, including the one responsible for running the above simple batch application:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:97e89d04-d760-410a-9443-d11eb1cc19c7][excluded]--&gt;&lt;pre class="plain" name="code"&gt;$ oc get pods NAME&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; READY&amp;#160;&amp;#160;&amp;#160;&amp;#160; STATUS&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; RESTARTS&amp;#160;&amp;#160; AGE jberet-simple-5-build&amp;#160;&amp;#160; 0/1&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; Completed&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 11h jberet-simple-6-build&amp;#160;&amp;#160; 0/1&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; Completed&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 8h jberet-simple-6-wwjm7&amp;#160;&amp;#160; 0/1&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; CrashLoopBackOff&amp;#160;&amp;#160; 105&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 8h postgresql-5-sbfm5&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 1/1&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; Running&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 1d simple-mpq8h&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0/1&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; Completed&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 8h&lt;/pre&gt;&lt;!--[CodeBlockEnd:97e89d04-d760-410a-9443-d11eb1cc19c7]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To view logs from the above simple batch job execution, passing the appropriate pod name:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:89d65a6e-80f7-48d1-928e-6b82b6945651][excluded]--&gt;&lt;pre class="plain" name="code"&gt;$ oc logs simple-mpq8h&lt;/pre&gt;&lt;!--[CodeBlockEnd:89d65a6e-80f7-48d1-928e-6b82b6945651]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To delete the job created in above step:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:9280ec68-16d4-46e2-ad5d-b331fa1ddafa][excluded]--&gt;&lt;pre class="plain" name="code"&gt;$ oc delete job simple job.batch "simple" deleted&lt;/pre&gt;&lt;!--[CodeBlockEnd:9280ec68-16d4-46e2-ad5d-b331fa1ddafa]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Schedule Repeating Job Executions with Kubernetes Cron Jobs from OpenShift Command Line&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;You may be wondering if it's possible to schedule periodic batch job executions from OpenShift command line.&amp;#160; The answer is yes, and this is supported with Kubernetes cron job api, similar to launching one-time job execution as demonstrated above.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;First, create a yaml file to define the Kubernetes crob job spec.&amp;#160; In the following example, simple-cron.yaml, the cron expression `*/1 * * * *` specifies running the batch job every minute.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:983fea3e-f445-4035-8c0c-2c1ec5a70d16][excluded]--&gt;&lt;pre class="javascript" name="code"&gt;apiVersion: batch/v1beta1 kind: CronJob metadata: &amp;#160; name: simple-cron spec: &amp;#160; successfulJobsHistoryLimit: 3 &amp;#160; failedJobsHistoryLimit: 1 &amp;#160; schedule: "*/1 * * * *" &amp;#160; jobTemplate: &amp;#160;&amp;#160;&amp;#160; spec: &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; template: &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; spec: &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; containers: &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; - name: simple-cron &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; image: docker-registry.default.svc:5000/pr/jberet-simple &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; command: ["java",&amp;#160; "-jar", "/deployments/jberet-simple.jar", "simple.xml", "jobParam1=x", "jobParam2=y"] &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; restartPolicy: OnFailure&lt;/pre&gt;&lt;!--[CodeBlockEnd:983fea3e-f445-4035-8c0c-2c1ec5a70d16]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Then, run the following commands to tell OpenShift to schedule the job executions:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:b3845644-6648-4796-8f0a-2345c302447a][excluded]--&gt;&lt;pre class="plain" name="code"&gt;$ oc create -f simple-cron.yaml cronjob.batch "simple-cron" created&lt;/pre&gt;&lt;!--[CodeBlockEnd:b3845644-6648-4796-8f0a-2345c302447a]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To list all cron jobs:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:780ad26a-cd19-4e4f-936d-67484600d934][excluded]--&gt;&lt;pre class="plain" name="code"&gt;$ oc get cronjobs NAME&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; SCHEDULE&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; SUSPEND&amp;#160;&amp;#160; ACTIVE&amp;#160;&amp;#160;&amp;#160; LAST SCHEDULE&amp;#160;&amp;#160; AGE simple-cron&amp;#160;&amp;#160; */1 * * * *&amp;#160;&amp;#160; False&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 7s&lt;/pre&gt;&lt;!--[CodeBlockEnd:780ad26a-cd19-4e4f-936d-67484600d934]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To get status of a specific cron job:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:452f3e24-1bd9-4fdf-afea-4aa5b54380b8][excluded]--&gt;&lt;pre class="plain" name="code"&gt;$ oc get cronjob simple-cron NAME&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; SCHEDULE&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; SUSPEND&amp;#160;&amp;#160; ACTIVE&amp;#160;&amp;#160;&amp;#160; LAST SCHEDULE&amp;#160;&amp;#160; AGE simple-cron&amp;#160;&amp;#160; */1 * * * *&amp;#160;&amp;#160; False&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 24s&lt;/pre&gt;&lt;!--[CodeBlockEnd:452f3e24-1bd9-4fdf-afea-4aa5b54380b8]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To get continuous status of a specific cron job with --watch option:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:aa2cd8ca-caf1-4012-92e2-ae588140b5ff][excluded]--&gt;&lt;pre class="plain" name="code"&gt;$ oc get cronjob simple-cron --watch NAME&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; SCHEDULE&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; SUSPEND&amp;#160;&amp;#160; ACTIVE&amp;#160;&amp;#160;&amp;#160; LAST SCHEDULE&amp;#160;&amp;#160; AGE simple-cron&amp;#160;&amp;#160; */1 * * * *&amp;#160;&amp;#160; False&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 33s simple-cron&amp;#160;&amp;#160; */1 * * * *&amp;#160;&amp;#160; False&amp;#160;&amp;#160;&amp;#160;&amp;#160; 1&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 7s&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 46s simple-cron&amp;#160;&amp;#160; */1 * * * *&amp;#160;&amp;#160; False&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 37s&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 1m&lt;/pre&gt;&lt;!--[CodeBlockEnd:aa2cd8ca-caf1-4012-92e2-ae588140b5ff]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To get all pods, including the pods responsible for running scheduled job executions:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:903df839-b989-4fe1-866f-9b472d24156a][excluded]--&gt;&lt;pre class="plain" name="code"&gt;$ oc get pods NAME&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; READY&amp;#160;&amp;#160;&amp;#160;&amp;#160; STATUS&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; RESTARTS&amp;#160;&amp;#160; AGE postgresql-5-sbfm5&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 1/1&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; Running&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 27d simple-cron-1536609780-fmrhf&amp;#160;&amp;#160; 0/1&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; ContainerCreating&amp;#160;&amp;#160; 0&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 1s simple-mpq8h&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0/1&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; Completed&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 26d&lt;/pre&gt;&lt;!--[CodeBlockEnd:903df839-b989-4fe1-866f-9b472d24156a]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To view logs of one of the scheduled job executions, passing the appropriate pod name:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:c33aabc5-0e6f-481b-bb89-f6c94c156b48][excluded]--&gt;&lt;pre class="plain" name="code"&gt;$ oc logs simple-cron-1536609780-fmrhf&lt;/pre&gt;&lt;!--[CodeBlockEnd:c33aabc5-0e6f-481b-bb89-f6c94c156b48]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To delete the cron job created above:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:5ed1fc62-7392-44a5-b40f-bf8244af9b75][excluded]--&gt;&lt;pre class="plain" name="code"&gt;$ oc delete cronjob simple-cron cronjob.batch "simple-cron" deleted&lt;/pre&gt;&lt;!--[CodeBlockEnd:5ed1fc62-7392-44a5-b40f-bf8244af9b75]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Summary&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;In this blog post, we demonstrated with a sample Java batch application how to run it locally, build and deploy containerized application to OpenShift, launch batch job execution from OpenShift command line, and schedule cron jobs of periodic batch job executions.&amp;#160; This post just touches some of the basics of running batch jobs in OpenShift platform, and there are many options for concurrency, scalability and restartability that are worth exploring further.&amp;#160; I hope you find it useful in your batch applicaton development, and feedback and comments are always welcome to help us improve project JBeret.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:86a98098-d31e-4faa-b426-9403a4a67c60] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/cebexgJ8joo" height="1" width="1" alt=""/&gt;</content><summary>Introduction   When migrating Java batch applications to cloud platforms such as OpenShift, there are different approaches how to build and containerize traditional applications.  Recall that JSR-352-based Java batch applications can be developed and run in either Java SE or Java EE (now Jakarta EE) environment.  So if your existing Java batch applications are Java EE web or enterprise application...</summary><dc:creator>Cheng Fang</dc:creator><dc:date>2018-09-18T02:47:33Z</dc:date><feedburner:origLink>https://developer.jboss.org/community/jberet/blog/2018/09/17/build-and-deploy-containerized-java-batch-applications-on-openshift</feedburner:origLink></entry><entry><title>Configuring the MongoDB WiredTiger memory cache for RHMAP</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/8hV-sAVy1_o/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Feedhenry" scheme="searchisko:content:tags" /><category term="memory cache" scheme="searchisko:content:tags" /><category term="mobile" scheme="searchisko:content:tags" /><category term="mongodb" scheme="searchisko:content:tags" /><category term="performance" scheme="searchisko:content:tags" /><category term="Performance Improvements" scheme="searchisko:content:tags" /><category term="Red Hat Mobile Application Platform" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="RHMAP" scheme="searchisko:content:tags" /><category term="WiredTiger" scheme="searchisko:content:tags" /><author><name>Camila Macedo</name></author><id>searchisko:content:id:jbossorg_blog-configuring_the_mongodb_wiredtiger_memory_cache_for_rhmap</id><updated>2018-09-17T11:00:34Z</updated><published>2018-09-17T11:00:34Z</published><content type="html">&lt;p&gt;This article describes how to configure MongoDB&amp;#8217;s WiredTiger memory cache in &lt;a href="https://developers.redhat.com/products/mobileplatform/overview/"&gt;Red Hat Mobile Application Platform&lt;/a&gt; (RHMAP) to prevent high-usage memory issues and Nagios alerts. If the WiredTiger cache consumes all the memory available for a container, memory issues and Nagios alerts will occur.&lt;/p&gt; &lt;p&gt;The WiredTiger storage engine is the default storage engine starting in MongoDB version 3.2. It uses MultiVersion Concurrency Control (&lt;a href="https://en.wikipedia.org/wiki/Multiversion_concurrency_control"&gt;MVCC&lt;/a&gt;) architecture for write operations in order to allow multiple different modifications to the same document at the same time.&lt;/p&gt; &lt;p&gt;WiredTiger also caches data and creates checkpoints to give you the ability to recover anytime it’s necessary. For example, if a MongoDB image deployed in a container fails, it is useful to recover the data that was not persisted. Additionally, WiredTiger can recover un-checkpointed data with its journal files. See the &lt;a href="https://docs.mongodb.com/manual/core/wiredtiger/#journal"&gt;journal documentation&lt;/a&gt; and &lt;a href="https://docs.mongodb.com/manual/core/wiredtiger/#storage-wiredtiger-checkpoints"&gt;snapshots and checkpoint documentation&lt;/a&gt; for more information.&lt;/p&gt; &lt;p&gt;&lt;span id="more-518297"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Configuring memory usage&lt;/h2&gt; &lt;p&gt;To prevent memory issues and Nagios alerts, the property &lt;code&gt;storage.wiredTiger.engineConfig.cacheSizeGB&lt;/code&gt; should be set to a value less than the amount of RAM available in the container. Another option to achieve the same result is through the &lt;code&gt;–wiredTigerCacheSizeGB&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;In version 3.2 of MongoDB, the default configuration is to use 1GB of memory or 60% of the available amount of memory when the available amount is larger than one 1GB. This usage percentage was replaced by 50% in version 3.4 of MongoDB. For more details, see the &lt;a href="https://docs.mongodb.com/manual/reference/configuration-options/#storage.wiredTiger.engineConfig.cacheSizeGB"&gt;storage.wiredTiger.engineConfig.cacheSizeGB API documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Due to a bug in MongoDB 3.2, a workaround is required to accept values lower than 1Gi. The property &lt;code&gt;configString: cache_size=&amp;#60;cache-size&amp;#62;&lt;/code&gt; needs to be set in the MongoDB configuration. The following is an example of setting the property to 600MB:&lt;/p&gt; &lt;pre&gt;# storage options - How and where to store data storage: # Directory for datafiles (defaults to /data/db/) dbPath: ${MONGODB_DATADIR} wiredTiger: engineConfig: configString: cache_size=600M&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The bug &lt;em&gt;&amp;#8220;WiredTiger cache size is only configurable in whole gigabytes&amp;#8221;&lt;/em&gt; can be viewed &lt;a href="https://jira.mongodb.org/browse/SERVER-22274"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Avoiding high-usage memory alerts and issues related to MongoDB in RHMAP&lt;/h2&gt; &lt;p&gt;In version 4.6.5 or above of RHMAP, the WiredTiger memory cache will be already configured to use 60%/600MB of the default amount of available memory, which is 1GB in the newer RHMAP MongoDB image released. To check this image, see its catalog &lt;a href="https://access.redhat.com/containers/#/registry.access.redhat.com/rhmap46/mongodb"&gt;here&lt;/a&gt;. However, in the previous image, memory issues and high-usage memory alerts may be triggered in Nagios because the cache size configuration was not set.&lt;/p&gt; &lt;p&gt;It is recommended that the latest version of the product be used in order to achieve the best user experience and avoid technical debts. If this is not possible, then it is recommended to update all MongoDB instances&amp;#8217; configuration to include a proper value for the WiredTiger cache size in both projects: Core and MBaaS.&lt;/p&gt; &lt;p&gt;The following the steps are examples suggested by Shannon Poole, an RHMAP senior software engineer, to perform this configuration manually.&lt;/p&gt; &lt;p&gt;1. Create a &lt;a href="https://docs.openshift.com/container-platform/3.9/dev_guide/configmaps.html"&gt;ConfigMap&lt;/a&gt;, as shown in the following example:&lt;/p&gt; &lt;pre&gt;kind: ConfigMap apiVersion: v1 metadata: name: wired-tiger-config namespace: rhmap-3-node-mbaas data: mongod.conf: | ## ## For list of options visit: ## https://docs.mongodb.org/manual/reference/configuration-options/ ## # systemLog options - How to do logging systemLog: # Runs the mongod in a quiet mode that attempts to limit the # amount of output quiet: true # net options - Network interfaces settings net: # Specify port number (27017 by default) port: 27017 # storage options - How and where to store data storage: # Directory for datafiles (defaults to /data/db/) dbPath: /var/lib/mongodb/data wiredTiger: engineConfig: configString: cache_size=400M # replication options - Configures replication replication: # Specifies a maximum size in megabytes for the replication # operation log (i.e. the oplog, # 5% of disk space by default) oplogSizeMB: 64 &lt;/pre&gt; &lt;p&gt;2. Add the &lt;a href="https://docs.openshift.com/container-platform/3.9/dev_guide/configmaps.html"&gt;ConfigMap&lt;/a&gt; to the &lt;a href="https://docs.openshift.com/container-platform/3.9/dev_guide/deployments/basic_deployment_operations.html"&gt;deployment configuration (dc)&lt;/a&gt; of the MongoDB pod in order to mount it in the right place (&lt;code&gt;/etc/mongod.conf&lt;/code&gt;). To edit the deployment configuration, use the following command or the Red hat OpenShift console.&lt;/p&gt; &lt;pre&gt;$ oc edit dc/&amp;#60;deployment_config&amp;#62;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note: &lt;/strong&gt;See the &lt;a href="https://docs.openshift.com/container-platform/3.9/dev_guide/configmaps.html#configmaps-use-case-consuming-in-volumes"&gt;Consuming in Volumes&lt;/a&gt; section of the Red Hat OpenShift documentation for further information.&lt;/p&gt; &lt;p&gt;3. Update the MongoDB replica set container specification, as shown in the following example:&lt;/p&gt; &lt;pre&gt;containers: - volumeMounts: - name: wired-tiger-config mountPath: /etc/mongod.conf subPath: mongod.conf volumes: - name: wired-tiger-config configMap: name: wired-tiger-config&lt;/pre&gt; &lt;p&gt;4. Check the pod logs to verify the changes. See if the custom cache size will be there after MongoDB is redeployed. This customization will be described in the logs when MongoDB initializes, as shown in the following example:&lt;/p&gt; &lt;pre&gt;=&amp;#62; [Mon Aug 20 13:42:22] wiredTiger cacheSizeGB set to 1 =&amp;#62; [Mon Aug 20 13:42:22] Waiting for local MongoDB to accept connections … 2018-08-20T13:42:22.837+0000 I STORAGE [main] Engine custom option: cache_size=600M&lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;If the memory amount allocated for the MongoDB instances will be changed, then it is recommended that you review the configuration and set an adequate value for the WiredTiger cache. There&amp;#8217;s no need to perform this configuration when the memory resource is bigger than 1GB, since the default set up is 60% of the total available in this situation. However, if a change is done in order to allocate 1GB or less, the recommendation is to customize this value, as explained in this post.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F17%2Fconfiguring-the-mongodb-wiredtiger-memory-cache-for-rhmap%2F&amp;#38;linkname=Configuring%20the%20MongoDB%20WiredTiger%20memory%20cache%20for%20RHMAP" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F17%2Fconfiguring-the-mongodb-wiredtiger-memory-cache-for-rhmap%2F&amp;#38;linkname=Configuring%20the%20MongoDB%20WiredTiger%20memory%20cache%20for%20RHMAP" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F17%2Fconfiguring-the-mongodb-wiredtiger-memory-cache-for-rhmap%2F&amp;#38;linkname=Configuring%20the%20MongoDB%20WiredTiger%20memory%20cache%20for%20RHMAP" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F17%2Fconfiguring-the-mongodb-wiredtiger-memory-cache-for-rhmap%2F&amp;#38;linkname=Configuring%20the%20MongoDB%20WiredTiger%20memory%20cache%20for%20RHMAP" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F17%2Fconfiguring-the-mongodb-wiredtiger-memory-cache-for-rhmap%2F&amp;#38;linkname=Configuring%20the%20MongoDB%20WiredTiger%20memory%20cache%20for%20RHMAP" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F17%2Fconfiguring-the-mongodb-wiredtiger-memory-cache-for-rhmap%2F&amp;#38;linkname=Configuring%20the%20MongoDB%20WiredTiger%20memory%20cache%20for%20RHMAP" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F17%2Fconfiguring-the-mongodb-wiredtiger-memory-cache-for-rhmap%2F&amp;#38;linkname=Configuring%20the%20MongoDB%20WiredTiger%20memory%20cache%20for%20RHMAP" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F17%2Fconfiguring-the-mongodb-wiredtiger-memory-cache-for-rhmap%2F&amp;#38;linkname=Configuring%20the%20MongoDB%20WiredTiger%20memory%20cache%20for%20RHMAP" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F17%2Fconfiguring-the-mongodb-wiredtiger-memory-cache-for-rhmap%2F&amp;#38;title=Configuring%20the%20MongoDB%20WiredTiger%20memory%20cache%20for%20RHMAP" data-a2a-url="https://developers.redhat.com/blog/2018/09/17/configuring-the-mongodb-wiredtiger-memory-cache-for-rhmap/" data-a2a-title="Configuring the MongoDB WiredTiger memory cache for RHMAP"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/09/17/configuring-the-mongodb-wiredtiger-memory-cache-for-rhmap/"&gt;Configuring the MongoDB WiredTiger memory cache for RHMAP&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/8hV-sAVy1_o" height="1" width="1" alt=""/&gt;</content><summary>This article describes how to configure MongoDB’s WiredTiger memory cache in Red Hat Mobile Application Platform (RHMAP) to prevent high-usage memory issues and Nagios alerts. If the WiredTiger cache consumes all the memory available for a container, memory issues and Nagios alerts will occur. The WiredTiger storage engine is the default storage engine starting in MongoDB version 3.2. It uses Mult...</summary><dc:creator>Camila Macedo</dc:creator><dc:date>2018-09-17T11:00:34Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/09/17/configuring-the-mongodb-wiredtiger-memory-cache-for-rhmap/</feedburner:origLink></entry><entry><title>Infinispan 9.4.0.CR3, 9.3.3 and codename vote</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/U_cNwBXdRxg/infinispan-940cr3-933-and-codename-vote.html" /><category term="9.3" scheme="searchisko:content:tags" /><category term="9.4" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><category term="release candidate" scheme="searchisko:content:tags" /><author><name>Tristan Tarrant</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_9_4_0_cr3_9_3_3_and_codename_vote</id><updated>2018-09-17T07:15:23Z</updated><published>2018-09-17T07:15:00Z</published><content type="html">Hi Infinispan Community,&lt;br /&gt;&lt;br /&gt;our original plan was to release 9.4 Final today, but we have decided to delay the release by an extra sprint (3 weeks).&lt;br /&gt;So today we are announcing 9.4.0.CR3 instead, which comes with the following fixes:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Segmented off-heap data container&lt;/li&gt;&lt;li&gt;Performance improvements for Near Caches&lt;/li&gt;&lt;li&gt;Hot Rod client-side statistics&lt;/li&gt;&lt;li&gt;Removal of the old compatibility mode in favor of the new transcoding capabilities is now complete&lt;/li&gt;&lt;li&gt;Server rebased on top of WildFly 14&lt;/li&gt;&lt;li&gt;Lots of code cleanups, especially around query&lt;/li&gt;&lt;li&gt;Bug fixes&lt;/li&gt;&lt;/ul&gt;For those of you on our stable branch, we also released a 9.3.3 with some bug fixes. &lt;br /&gt;&lt;ul&gt;&lt;/ul&gt;Please &lt;a href="http://infinispan.org/download/" target="_blank"&gt;download&lt;/a&gt;, &lt;a href="https://issues.jboss.org/projects/ISPN" target="_blank"&gt;report bugs&lt;/a&gt;, &lt;a href="https://infinispan.zulipchat.com/" target="_blank"&gt;chat with us&lt;/a&gt;, ask questions on the &lt;a href="https://developer.jboss.org/en/infinispan/content" target="_blank"&gt;forum&lt;/a&gt; or on &lt;a href="https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest" target="_blank"&gt;StackOverflow&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;As this release is yet unnamed, please make sure you vote for the name:&lt;br /&gt;&lt;br /&gt;&lt;iframe frameborder="0" height="962" marginheight="0" marginwidth="0" src="https://docs.google.com/forms/d/e/1FAIpQLSflMswdzxG_q2cZWnQunW5D6-rFnbxvrg8ZTC5IsElYeAdgNw/viewform?embedded=true" width="640"&gt;Loading...&lt;/iframe&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/v3K4aVxD-bk" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/U_cNwBXdRxg" height="1" width="1" alt=""/&gt;</content><summary>Hi Infinispan Community, our original plan was to release 9.4 Final today, but we have decided to delay the release by an extra sprint (3 weeks). So today we are announcing 9.4.0.CR3 instead, which comes with the following fixes: Segmented off-heap data container Performance improvements for Near Caches Hot Rod client-side statistics Removal of the old compatibility mode in favor of the new transc...</summary><dc:creator>Tristan Tarrant</dc:creator><dc:date>2018-09-17T07:15:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/Infinispan/~3/v3K4aVxD-bk/infinispan-940cr3-933-and-codename-vote.html</feedburner:origLink></entry><entry><title>Unpublish a npm package</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Q1Rl7OTT6xo/unpublish-npm-package.html" /><category term="feed_group_name_aerogear" scheme="searchisko:content:tags" /><category term="feed_name_corinnekrych" scheme="searchisko:content:tags" /><author><name>Corinne Krych</name></author><id>searchisko:content:id:jbossorg_blog-unpublish_a_npm_package</id><updated>2018-09-13T13:07:00Z</updated><published>2018-09-13T13:07:00Z</published><content type="html">Last week, I was playing with semantic-release. Giving your CI control over your semantic release. Sweet. I should dedicate a writing on it (to come later). &lt;br/&gt;Nevertheless, I got in a situation that an erroneous version number get released (wrong commit message). Without a major version bump, a breaking change in the lib won't be reflecting (breaking the whole purpose of semantic release). &lt;br/&gt;&lt;br/&gt;&lt;h2&gt;Unpublish a "recent" version&lt;/h2&gt;&lt;br/&gt; If you try to unpublish a version just released: &lt;pre&gt;&lt;code class="language-JavaScript"&gt;$ npm publish .&lt;br /&gt;+ launcher-demo@5.0.0&lt;br /&gt;$ npm unpublish launcher-demo@5.0.0 &lt;br /&gt;- launcher-demo@5.0.0&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt; It's ok! Pff you can do it. &lt;br/&gt;Now is it possible later to publish the same version? &lt;br/&gt;&lt;pre&gt;&lt;code class="language-JavaScript"&gt;$ npm publish . &lt;br /&gt;npm ERR! publish Failed PUT 400&lt;br /&gt;npm ERR! code E400&lt;br /&gt;npm ERR! Cannot publish over previously published version "5.0.0". : launcher-demo&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt; It makes sense you can't use the same version, so if you update &lt;code&gt;package.json&lt;/code&gt; to 5.0.1: &lt;pre&gt;&lt;code class="language-JavaScript"&gt;$ npm publish .&lt;br /&gt;+ launcher-demo@5.0.1&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt; Just fine! &lt;br/&gt;&lt;br/&gt;&lt;h2&gt;Unpublish a "old" version&lt;/h2&gt;&lt;br/&gt; Let's say I want to unpublish a version released last week: &lt;pre&gt;&lt;code class="language-JavaScript"&gt;$ npm unpublish launcher-demo@3.2.8&lt;br /&gt;npm ERR! unpublish Failed to update data&lt;br /&gt;npm ERR! code E400&lt;br /&gt;npm ERR! You can no longer unpublish this version. Please deprecate it instead&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;Thanks &lt;code&gt;npm&lt;/code&gt; for your kind suggestion, let try to deprecate it with an short message: &lt;pre&gt;&lt;code class="language-JavaScript"&gt;$ npm deprecate launcher-demo@3.2.8 'erronous version'&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;At least now the package is visible as deprecated, trying to pull it will display a deprecate warning. &lt;pre&gt;&lt;code class="language-JavaScript"&gt;$ npm i launcher-demo@3.2.8&lt;br /&gt;npm WARN deprecated launcher-demo@3.2.8: erronous version&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;br/&gt;&lt;br/&gt;&lt;h2&gt;Unpublish policy&lt;/h2&gt;&lt;br/&gt; "Old", "recent" version. What does it all mean? Let's check the &lt;a href="https://www.npmjs.com/policies/unpublish"&gt;npm unpublish policy&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;div style="border-style: solid;border-color:grey;background: lightgrey;padding:1em"&gt;&lt;strong&gt;Quote:&lt;/strong&gt;If the package is still within the first 72 hours, you should use one of the following from your command line: &lt;br/&gt;&lt;li&gt;&lt;code&gt;npm unpublish &lt;package_name&gt; -f&lt;/code&gt; to remove the entire package thanks to the -f or force flag&lt;&gt;/li &lt;li&gt;&lt;code&gt;npm unpublish &lt;package_name&gt;@&lt;version&gt;&lt;/code&gt; to remove a specific version&lt;/li&gt;&lt;br/&gt;&lt;strong&gt;Some considerations&lt;/strong&gt;: &lt;br/&gt;Once package@version has been used, you can never use it again. You must publish a new version even if you unpublished the old one.&lt;br/&gt;If you entirely unpublish a package, nobody else (even you) will be able to publish a package of that name for 24 hours. &lt;br/&gt;&lt;/div&gt;&lt;br/&gt;After the &lt;a href="https://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm"&gt;one-developer-just-broke-Node&lt;/a&gt; buzzy affair in March 2016, the unpublish policies were changed. A 10-lines library used every where should not put the whole JS community down. A step toward more immutability won't arm. &lt;br/&gt;&lt;br/&gt;&lt;h2&gt;Where to go from there&lt;/h2&gt;&lt;br/&gt;Error releasing your package? &lt;br/&gt;You've got 72 hours to fix it. &lt;br/&gt;otherwise deprecate it. &lt;br/&gt;Maybe, it's time to automate releasing with your CI. &lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-LvL1Uidj5KE/W5pe17y5MgI/AAAAAAAADCw/lYDzG4v5lV0lJaskD8hBzT-cGjyJW2CyQCLcBGAs/s1600/bender.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://4.bp.blogspot.com/-LvL1Uidj5KE/W5pe17y5MgI/AAAAAAAADCw/lYDzG4v5lV0lJaskD8hBzT-cGjyJW2CyQCLcBGAs/s320/bender.png" width="309" height="320" data-original-width="392" data-original-height="406" /&gt;&lt;/a&gt;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Q1Rl7OTT6xo" height="1" width="1" alt=""/&gt;</content><summary>Last week, I was playing with semantic-release. Giving your CI control over your semantic release. Sweet. I should dedicate a writing on it (to come later). Nevertheless, I got in a situation that an erroneous version number get released (wrong commit message). Without a major version bump, a breaking change in the lib won't be reflecting (breaking the whole purpose of semantic release). Unpublish...</summary><dc:creator>Corinne Krych</dc:creator><dc:date>2018-09-13T13:07:00Z</dc:date><feedburner:origLink>http://corinnekrych.blogspot.com/2018/09/unpublish-npm-package.html</feedburner:origLink></entry><entry><title>My trip to JavaZone 2018</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/F9C-1jF5Gds/my-trip-to-javazone-2018.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="Presentation" scheme="searchisko:content:tags" /><category term="speaker" scheme="searchisko:content:tags" /><category term="video" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-my_trip_to_javazone_2018</id><updated>2018-09-13T07:47:30Z</updated><published>2018-09-13T07:36:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="_5pbx userContent _3576" data-ft="{&amp;quot;tn&amp;quot;:&amp;quot;K&amp;quot;}" id="js_11" style="background-color: white; color: #1d2129; font-family: system-ui, -apple-system, system-ui, &amp;quot;.SFNSText-Regular&amp;quot;, sans-serif; font-size: 14px; line-height: 1.38; margin-top: 6px;"&gt;&lt;div class="text_exposed_root text_exposed" id="id_5b9a11b90accf8d76690133" style="display: inline; font-family: inherit;"&gt;&lt;div style="font-family: inherit; margin-bottom: 6px;"&gt;&lt;span style="font-family: inherit;"&gt;This week I am attending and speaking at the&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://2018.javazone.no/"&gt;&lt;span class="_5afx" style="direction: ltr; font-family: inherit;"&gt;&lt;span class="_58cm" style="font-family: inherit;"&gt;JavaZone&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: inherit;"&gt;&lt;a href="https://2018.javazone.no/"&gt;2018&lt;/a&gt; conference in Oslo.&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-LwdeyXd17SQ/W5oSYrtH4kI/AAAAAAAABq8/uS8V3H0BxHUgHb3CUl1HtzVDEuR6SL_zgCLcBGAs/s1600/IMG_7007.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1280" data-original-width="960" height="320" src="https://3.bp.blogspot.com/-LwdeyXd17SQ/W5oSYrtH4kI/AAAAAAAABq8/uS8V3H0BxHUgHb3CUl1HtzVDEuR6SL_zgCLcBGAs/s320/IMG_7007.jpg" width="240" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="font-family: inherit; margin-bottom: 6px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="font-family: inherit; margin-bottom: 6px;"&gt;&lt;span style="font-family: inherit;"&gt;I was here last time 7 years ago, so it was good to be back. The weather is very nice with rainbows and unicorns and everything ... well only rainbows.&lt;/span&gt;&lt;/div&gt;&lt;div style="font-family: inherit; margin-bottom: 6px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-Jag8dLAfCbw/W5oSRS0ZpoI/AAAAAAAABq4/atCkCCHSccEVYNL0dvUsJgZKZ--PN4JOgCLcBGAs/s1600/IMG_7001.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1280" data-original-width="960" height="320" src="https://3.bp.blogspot.com/-Jag8dLAfCbw/W5oSRS0ZpoI/AAAAAAAABq4/atCkCCHSccEVYNL0dvUsJgZKZ--PN4JOgCLcBGAs/s320/IMG_7001.jpg" width="240" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="font-family: inherit; margin-bottom: 6px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="font-family: inherit; margin-bottom: 6px; margin-top: 6px;"&gt;As a speaker I was asked to sign the speakers wall, and was given a woollen hat as gift, which will be handy this weekend where I am joining other speakers for a boat trip&amp;nbsp;&lt;span class="_5afx" style="direction: ltr; font-family: inherit;"&gt;&lt;span class="_58cm" style="font-family: inherit;"&gt;JourneyZone&lt;/span&gt;&lt;/span&gt;&amp;nbsp;in northern Norway at&amp;nbsp;&lt;span class="_5afx" style="direction: ltr; font-family: inherit;"&gt;&lt;span class="_58cm" style="font-family: inherit;"&gt;Lofoten&lt;/span&gt;&lt;/span&gt;. T&lt;span class="text_exposed_show" style="display: inline; font-family: inherit;"&gt;hey say the landscape should be spectacular.&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-C7zuwc0DHr8/W5oSf225yCI/AAAAAAAABrA/6YihRYcbNAcGJbXYO4W-JygprxCRUksBQCLcBGAs/s1600/IMG_7011.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="960" data-original-width="1280" height="240" src="https://3.bp.blogspot.com/-C7zuwc0DHr8/W5oSf225yCI/AAAAAAAABrA/6YihRYcbNAcGJbXYO4W-JygprxCRUksBQCLcBGAs/s320/IMG_7011.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-OBqMZflGyuQ/W5oSfxtJQiI/AAAAAAAABrE/0hP5xDBGYS4KBlGPMyHE9DRvJxj8a39wwCLcBGAs/s1600/IMG_7013.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1280" data-original-width="960" height="320" src="https://3.bp.blogspot.com/-OBqMZflGyuQ/W5oSfxtJQiI/AAAAAAAABrE/0hP5xDBGYS4KBlGPMyHE9DRvJxj8a39wwCLcBGAs/s320/IMG_7013.jpg" width="240" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="font-family: inherit; margin-bottom: 6px; margin-top: 6px;"&gt;&lt;span class="text_exposed_show" style="display: inline; font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-dvrLb3eJlXI/W5oSk7rHe_I/AAAAAAAABrM/YwQlmgFqrqUaH2pH85cSRaukIGl9WrYXwCLcBGAs/s1600/35387807_10156283321721605_3847542608402317312_o.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="939" data-original-width="1600" height="187" src="https://4.bp.blogspot.com/-dvrLb3eJlXI/W5oSk7rHe_I/AAAAAAAABrM/YwQlmgFqrqUaH2pH85cSRaukIGl9WrYXwCLcBGAs/s320/35387807_10156283321721605_3847542608402317312_o.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="font-family: inherit; margin-bottom: 6px; margin-top: 6px;"&gt;&lt;span class="text_exposed_show" style="display: inline; font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="text_exposed_show" style="display: inline; font-family: inherit;"&gt;&lt;div style="font-family: inherit; margin-bottom: 6px;"&gt;Yesterday evening I was out dining with fellow danish friends Flemming and Anders, whom I know from our little IT-network group called getsmarterdaty.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-djtJCYPM-Uw/W5oSpR9qa5I/AAAAAAAABrU/SLzQbFzffyowbE4dbhKEUjQI6a6dXDx_QCLcBGAs/s1600/IMG_7002.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1280" data-original-width="962" height="320" src="https://3.bp.blogspot.com/-djtJCYPM-Uw/W5oSpR9qa5I/AAAAAAAABrU/SLzQbFzffyowbE4dbhKEUjQI6a6dXDx_QCLcBGAs/s320/IMG_7002.jpg" width="240" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="font-family: inherit; margin-bottom: 6px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="font-family: inherit; margin-bottom: 6px; margin-top: 6px;"&gt;My talk (&lt;a href="https://2018.javazone.no/program/065eb114-5b6c-4387-a41b-dcb058870704"&gt;Camel microservices with Spring Boot and Kubernetes&lt;/a&gt;) was yesterday at 5pm and its always special to present here at the Spectrum arena in Oslo, as the rooms have very steep seatings so attendees are mostly looking down upon you. The talk is video recorded and will be posted online soon. The &lt;a href="https://github.com/davsclaus/camel-riders-in-the-cloud/tree/javazone"&gt;slides and source-code&lt;/a&gt; is located on my github account.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-Wrk_SZmvl58/W5oWCYx-zEI/AAAAAAAABr0/LqsFkrpPnuIVRZR1KAdjAuuEc0W2f7V-ACLcBGAs/s1600/Dm6T2qIX4AEqbzE.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="900" data-original-width="1600" height="180" src="https://3.bp.blogspot.com/-Wrk_SZmvl58/W5oWCYx-zEI/AAAAAAAABr0/LqsFkrpPnuIVRZR1KAdjAuuEc0W2f7V-ACLcBGAs/s320/Dm6T2qIX4AEqbzE.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="font-family: inherit; margin-bottom: 6px; margin-top: 6px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-LOEuTt9d5y4/W5oStnaw0eI/AAAAAAAABrY/Pux1LDQ3aC0wZOx7nPEUQXUzk6G7WGGxACLcBGAs/s1600/IMG_0185.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="956" data-original-width="1280" height="239" src="https://1.bp.blogspot.com/-LOEuTt9d5y4/W5oStnaw0eI/AAAAAAAABrY/Pux1LDQ3aC0wZOx7nPEUQXUzk6G7WGGxACLcBGAs/s320/IMG_0185.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="font-family: inherit; margin-bottom: 6px; margin-top: 6px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="font-family: inherit; margin-bottom: 6px; margin-top: 6px;"&gt;The conference hosts about 3000 attendees and is a very well organized event running for 17 years.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="_3x-2" data-ft="{&amp;quot;tn&amp;quot;:&amp;quot;H&amp;quot;}" style="background-color: white; color: #1d2129; font-family: system-ui, -apple-system, system-ui, &amp;quot;.SFNSText-Regular&amp;quot;, sans-serif; font-size: 12px;"&gt;&lt;div data-ft="{&amp;quot;tn&amp;quot;:&amp;quot;H&amp;quot;}" style="font-family: inherit;"&gt;&lt;div class="mtm" style="font-family: inherit; margin-top: 10px;"&gt;&lt;div class="_2a2q _65sr" style="font-family: inherit; height: 430px; margin-left: -12px; margin-right: -12px; overflow: hidden; position: relative; width: 516px;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-6o6Sk8oNYZQ/W5oSyBgfcnI/AAAAAAAABrg/Q1K6Pie9Iqgb7QP32iZWUxgnu0j1wlyewCLcBGAs/s1600/IMG_7014.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="960" data-original-width="1280" height="240" src="https://3.bp.blogspot.com/-6o6Sk8oNYZQ/W5oSyBgfcnI/AAAAAAAABrg/Q1K6Pie9Iqgb7QP32iZWUxgnu0j1wlyewCLcBGAs/s320/IMG_7014.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;a ajaxify="https://www.facebook.com/photo.php?fbid=169151280628699&amp;amp;set=pcb.169154413961719&amp;amp;type=3&amp;amp;size=960%2C1280&amp;amp;source=13&amp;amp;player_origin=profile&amp;amp;referrer_profile_id=100026014848069&amp;amp;__xts__%5B0%5D=68.ARDs7OeIrMwWEDdOv4hbJtO8QXIvyVwZzbZy1DxoOmlGiEMX1-1nKkUBNi31WU_RuWzJ8VM_Zhb1bFDv7nxSfy5JS1ONy0cJBgi37lnUf19JzRZDlZ4K1LBYscfKfDmiwiX7ff-pUgJbbuIxl5L4DNYbdYQzx7v6Z9bmCDB67zjeMDtGyjEY&amp;amp;__tn__=HH-R" class="_5dec _xcx" data-ploi="https://scontent-arn2-1.xx.fbcdn.net/v/t1.0-9/41717172_169151287295365_5748056634630864896_o.jpg?_nc_cat=0&amp;amp;oh=1c0cce190ab33441982949595381193a&amp;amp;oe=5C2F3131" data-plsi="https://scontent-arn2-1.xx.fbcdn.net/v/t1.0-9/41665302_169151283962032_1830118232346853376_n.jpg?_nc_cat=0&amp;amp;oh=320fb905cb2176b776095cdca60b91dc&amp;amp;oe=5C3197FB" data-referrerid="100026014848069" data-render-location="timeline" href="https://www.facebook.com/photo.php?fbid=169151280628699&amp;amp;set=pcb.169154413961719&amp;amp;type=3" id="u_0_2r" rel="theater" style="color: #365899; cursor: pointer; display: block; font-family: inherit; height: 257px; left: 0px; position: absolute; text-decoration-line: none; top: 0px; width: 257px;"&gt;&lt;/a&gt;&lt;a ajaxify="https://www.facebook.com/photo.php?fbid=169151280628699&amp;amp;set=pcb.169154413961719&amp;amp;type=3&amp;amp;size=960%2C1280&amp;amp;source=13&amp;amp;player_origin=profile&amp;amp;referrer_profile_id=100026014848069&amp;amp;__xts__%5B0%5D=68.ARDs7OeIrMwWEDdOv4hbJtO8QXIvyVwZzbZy1DxoOmlGiEMX1-1nKkUBNi31WU_RuWzJ8VM_Zhb1bFDv7nxSfy5JS1ONy0cJBgi37lnUf19JzRZDlZ4K1LBYscfKfDmiwiX7ff-pUgJbbuIxl5L4DNYbdYQzx7v6Z9bmCDB67zjeMDtGyjEY&amp;amp;__tn__=HH-R" class="_5dec _xcx" data-ploi="https://scontent-arn2-1.xx.fbcdn.net/v/t1.0-9/41717172_169151287295365_5748056634630864896_o.jpg?_nc_cat=0&amp;amp;oh=1c0cce190ab33441982949595381193a&amp;amp;oe=5C2F3131" data-plsi="https://scontent-arn2-1.xx.fbcdn.net/v/t1.0-9/41665302_169151283962032_1830118232346853376_n.jpg?_nc_cat=0&amp;amp;oh=320fb905cb2176b776095cdca60b91dc&amp;amp;oe=5C3197FB" data-referrerid="100026014848069" data-render-location="timeline" href="https://www.facebook.com/photo.php?fbid=169151280628699&amp;amp;set=pcb.169154413961719&amp;amp;type=3" id="u_0_2r" rel="theater" style="color: #365899; cursor: pointer; display: block; font-family: inherit; height: 257px; left: 0px; position: absolute; text-decoration-line: none; top: 0px; width: 257px;"&gt;&lt;br /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=y_p_6cnTeoQ:YuYYBrRQRVU:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=y_p_6cnTeoQ:YuYYBrRQRVU:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=y_p_6cnTeoQ:YuYYBrRQRVU:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=y_p_6cnTeoQ:YuYYBrRQRVU:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=y_p_6cnTeoQ:YuYYBrRQRVU:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=y_p_6cnTeoQ:YuYYBrRQRVU:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=y_p_6cnTeoQ:YuYYBrRQRVU:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/y_p_6cnTeoQ" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/F9C-1jF5Gds" height="1" width="1" alt=""/&gt;</content><summary>This week I am attending and speaking at the JavaZone 2018 conference in Oslo. I was here last time 7 years ago, so it was good to be back. The weather is very nice with rainbows and unicorns and everything ... well only rainbows. As a speaker I was asked to sign the speakers wall, and was given a woollen hat as gift, which will be handy this weekend where I am joining other speakers for a boat tr...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2018-09-13T07:36:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/y_p_6cnTeoQ/my-trip-to-javazone-2018.html</feedburner:origLink></entry><entry><title>Using Hibernate ORM with JDK 11</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/64frkZqVjlI/" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="Hibernate ORM" scheme="searchisko:content:tags" /><author><name>Guillaume Smet</name></author><id>searchisko:content:id:jbossorg_blog-using_hibernate_orm_with_jdk_11</id><updated>2018-09-13T13:07:51Z</updated><published>2018-09-13T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;JDK 11 is almost there and you might want to start testing your applications with it.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Your applications use Hibernate technologies? It shouldn’t be a problem but here are some important information.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="hibernate-technologies-and-jdk-11-support"&gt;&lt;a class="anchor" href="#hibernate-technologies-and-jdk-11-support"&gt;&lt;/a&gt;Hibernate technologies and JDK 11 support&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We started testing the Hibernate technologies with JDK 11 very early so we have some good news: &lt;a href="http://hibernate.org/orm/"&gt;Hibernate ORM&lt;/a&gt; (5.3.3+), &lt;a href="http://hibernate.org/search/"&gt;Hibernate Search&lt;/a&gt; (5.10.4+) and &lt;a href="http://hibernate.org/validator/"&gt;Hibernate Validator&lt;/a&gt; (6.0.12+) can be used with JDK 11.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Note that, for now, even though we define automatic module names, running as Jigsaw modules is not fully tested and not expected to work.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="a-few-quirks-with-orm-though"&gt;&lt;a class="anchor" href="#a-few-quirks-with-orm-though"&gt;&lt;/a&gt;A few quirks with ORM though&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;While Hibernate ORM 5.3 supports (and is tested with) JDK 11, there are a few things you need to tweak while waiting for Hibernate ORM 5.4.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="jaxb-dependency"&gt;&lt;a class="anchor" href="#jaxb-dependency"&gt;&lt;/a&gt;JAXB dependency&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;JAXB is not provided by the JDK anymore so you need an external dependency for it:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="xml"&gt;&lt;span style="color:#070;font-weight:bold"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span style="color:#070;font-weight:bold"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax.xml.bind&lt;span style="color:#070;font-weight:bold"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span style="color:#070;font-weight:bold"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jaxb-api&lt;span style="color:#070;font-weight:bold"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span style="color:#070;font-weight:bold"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.3.0&lt;span style="color:#070;font-weight:bold"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span style="color:#070;font-weight:bold"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;span style="color:#070;font-weight:bold"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span style="color:#070;font-weight:bold"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.glassfish.jaxb&lt;span style="color:#070;font-weight:bold"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span style="color:#070;font-weight:bold"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jaxb-runtime&lt;span style="color:#070;font-weight:bold"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span style="color:#070;font-weight:bold"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.3.0.1&lt;span style="color:#070;font-weight:bold"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span style="color:#070;font-weight:bold"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;These dependencies will be added in Hibernate ORM 5.4.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="bytebuddy-experimental-support"&gt;&lt;a class="anchor" href="#bytebuddy-experimental-support"&gt;&lt;/a&gt;ByteBuddy experimental support&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When using ORM with JDK 11, you might end up with the following exception coming from &lt;a href="http://bytebuddy.net"&gt;ByteBuddy&lt;/a&gt;:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code&gt;Caused by: org.hibernate.bytecode.enhance.spi.EnhancementException: Failed to enhance class org.hibernate.jpa.test.enhancement.TestLazyPropertyOnPreUpdate at org.hibernate.bytecode.enhance.internal.bytebuddy.EnhancerImpl.enhance(EnhancerImpl.java:117) at org.hibernate.testing.bytecode.enhancement.BytecodeEnhancerRunner$2.loadClass(BytecodeEnhancerRunner.java:94) ... 40 more Caused by: java.lang.UnsupportedOperationException at net.bytebuddy.jar.asm.ClassVisitor.visitNestMemberExperimental(ClassVisitor.java:248) at net.bytebuddy.jar.asm.ClassReader.accept(ClassReader.java:651) at net.bytebuddy.jar.asm.ClassReader.accept(ClassReader.java:391) at net.bytebuddy.pool.TypePool$Default.parse(TypePool.java:1051)&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This is due to &lt;a href="https://asm.ow2.io/"&gt;ASM&lt;/a&gt; (the component used by ByteBuddy to manipulate the bytecode) only supporting some JDK 11 features as experimental. ByteBuddy does the same and you need a specific flag to enable the support of these features.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To get everything in order, you need to add the following flag to your JVM: &lt;code&gt;-Dnet.bytebuddy.experimental=true&lt;/code&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Hopefully, ASM 7 will be released soon.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="feedback-issues-ideas"&gt;&lt;a class="anchor" href="#feedback-issues-ideas"&gt;&lt;/a&gt;Feedback, issues, ideas?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To get in touch, use the usual channels:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/"&gt;User forum&lt;/a&gt; (usage questions, general feedback)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/"&gt;Issue tracker&lt;/a&gt; (bug reports, feature requests)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/hibernate-dev/"&gt;Mailing list&lt;/a&gt; (development-related discussions)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/64frkZqVjlI" height="1" width="1" alt=""/&gt;</content><summary>JDK 11 is almost there and you might want to start testing your applications with it. Your applications use Hibernate technologies? It shouldn’t be a problem but here are some important information. Hibernate technologies and JDK 11 support We started testing the Hibernate technologies with JDK 11 very early so we have some good news: Hibernate ORM (5.3.3+), Hibernate Search (5.10.4+) and Hibernat...</summary><dc:creator>Guillaume Smet</dc:creator><dc:date>2018-09-13T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2018/09/13/using-hibernate-orm-with-jdk11/</feedburner:origLink></entry><entry><title>Red Hat Application Development I: Programming Java EE (JB183) course now available</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/A5fTTzahFXw/" /><category term="CDI" scheme="searchisko:content:tags" /><category term="Enterprise Java" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Java EE" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Red Hat Certification" scheme="searchisko:content:tags" /><category term="Red Hat JBoss Enterprise Application Platform" scheme="searchisko:content:tags" /><category term="Red Hat Training" scheme="searchisko:content:tags" /><category term="train" scheme="searchisko:content:tags" /><category term="training" scheme="searchisko:content:tags" /><author><name>Zachary Gutterman</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_application_development_i_programming_java_ee_jb183_course_now_available</id><updated>2018-09-12T14:57:56Z</updated><published>2018-09-12T14:57:56Z</published><content type="html">&lt;p&gt;The Red Hat Training team is very pleased to announce the release of our latest video classroom course, Red Hat Application Development I: Programming Java EE (JB183). JB183 is the preparatory course for the Red Hat Certified Enterprise Application Developer Exam (EX183). This video classroom course is available now as part of the &lt;a href="https://www.redhat.com/en/services/training/learning-subscription"&gt;Red Hat Learning Subscription&lt;/a&gt; or as a separate &lt;a href="https://www.redhat.com/en/services/training/jb183-red-hat-application-development-i-programming-java-ee"&gt;a la carte purchase&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/Vx04liTc2kw?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;In this course, veteran instructor Will Dinyes guides you through enterprise Java development with easy-to-follow lectures and demonstrations. JB183 is designed for students with a strong understanding of Java SE and object-oriented programming who want to learn how to begin developing modern enterprise applications on &lt;a href="https://developers.redhat.com/products/eap/overview/"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt; (JBoss EAP) 7.0.&lt;/p&gt; &lt;p&gt;&lt;span id="more-502837"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Will introduces the following concepts and topics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Generating multi-tiered Java EE applications&lt;/li&gt; &lt;li&gt;Packaging and deploying Java EE applications&lt;/li&gt; &lt;li&gt;Creating Enterprise Java Beans, including message-driven beans&lt;/li&gt; &lt;li&gt;Managing persistence&lt;/li&gt; &lt;li&gt;Creating REST services with JAX-RS&lt;/li&gt; &lt;li&gt;Implementing Contexts and Dependency Injection&lt;/li&gt; &lt;li&gt;Creating messaging applications with JMS&lt;/li&gt; &lt;li&gt;Securing Java EE applications with JAAS&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For those who are entering the workforce or just starting a career in Java EE development, this course will provide the necessary foundation for developing and contributing to enterprise Java applications. Further, this course prepares students for the &lt;a href="https://www.google.com/url?sa=t&amp;#38;rct=j&amp;#38;q=&amp;#38;esrc=s&amp;#38;source=web&amp;#38;cd=1&amp;#38;cad=rja&amp;#38;uact=8&amp;#38;ved=2ahUKEwj46P3B05fdAhVPMd8KHdiJBp4QFjAAegQICBAB&amp;#38;url=https%3A%2F%2Fwww.redhat.com%2Fen%2Fservices%2Ftraining%2Fex183-red-hat-certified-enterprise-application-developer-exam&amp;#38;usg=AOvVaw2xln_dwQP_mw7kTF57aKMa"&gt;Red Hat Certified Enterprise Application Developer Exam (EX183)&lt;/a&gt;. If you pass the exam, you become a Red Hat Certified Enterprise Application Developer. This certificate is the first step to becoming a Red Hat Certified Architect.&lt;/p&gt; &lt;p&gt;Visit &lt;a href="https://www.redhat.com/en/services/training/learning-subscription"&gt;Red Hat Learning Subscription&lt;/a&gt; or &lt;a href="mailto:zgutterm@redhat.com"&gt;contact me&lt;/a&gt; to learn more about the course.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F12%2Fred-hat-java-ee-course%2F&amp;#38;linkname=Red%20Hat%20Application%20Development%20I%3A%20Programming%20Java%20EE%20%28JB183%29%20course%20now%20available" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F12%2Fred-hat-java-ee-course%2F&amp;#38;linkname=Red%20Hat%20Application%20Development%20I%3A%20Programming%20Java%20EE%20%28JB183%29%20course%20now%20available" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F12%2Fred-hat-java-ee-course%2F&amp;#38;linkname=Red%20Hat%20Application%20Development%20I%3A%20Programming%20Java%20EE%20%28JB183%29%20course%20now%20available" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F12%2Fred-hat-java-ee-course%2F&amp;#38;linkname=Red%20Hat%20Application%20Development%20I%3A%20Programming%20Java%20EE%20%28JB183%29%20course%20now%20available" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F12%2Fred-hat-java-ee-course%2F&amp;#38;linkname=Red%20Hat%20Application%20Development%20I%3A%20Programming%20Java%20EE%20%28JB183%29%20course%20now%20available" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F12%2Fred-hat-java-ee-course%2F&amp;#38;linkname=Red%20Hat%20Application%20Development%20I%3A%20Programming%20Java%20EE%20%28JB183%29%20course%20now%20available" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F12%2Fred-hat-java-ee-course%2F&amp;#38;linkname=Red%20Hat%20Application%20Development%20I%3A%20Programming%20Java%20EE%20%28JB183%29%20course%20now%20available" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F12%2Fred-hat-java-ee-course%2F&amp;#38;linkname=Red%20Hat%20Application%20Development%20I%3A%20Programming%20Java%20EE%20%28JB183%29%20course%20now%20available" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F12%2Fred-hat-java-ee-course%2F&amp;#38;title=Red%20Hat%20Application%20Development%20I%3A%20Programming%20Java%20EE%20%28JB183%29%20course%20now%20available" data-a2a-url="https://developers.redhat.com/blog/2018/09/12/red-hat-java-ee-course/" data-a2a-title="Red Hat Application Development I: Programming Java EE (JB183) course now available"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/09/12/red-hat-java-ee-course/"&gt;Red Hat Application Development I: Programming Java EE (JB183) course now available&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/A5fTTzahFXw" height="1" width="1" alt=""/&gt;</content><summary>The Red Hat Training team is very pleased to announce the release of our latest video classroom course, Red Hat Application Development I: Programming Java EE (JB183). JB183 is the preparatory course for the Red Hat Certified Enterprise Application Developer Exam (EX183). This video classroom course is available now as part of the Red Hat Learning Subscription or as a separate a la carte purchase....</summary><dc:creator>Zachary Gutterman</dc:creator><dc:date>2018-09-12T14:57:56Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/09/12/red-hat-java-ee-course/</feedburner:origLink></entry><entry><title>JBoss Tools 4.9.0.AM3 for Eclipse 2018-09 M2</title><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/jbossbuzz/~3/jQMu0ePpWIA/4.9.0.am3.html" /><category term="release" /><category term="jbosstools" /><category term="devstudio" /><category term="jbosscentral" /><author><name>jeffmaury</name></author><id>https://tools.jboss.org/blog/4.9.0.am3.html</id><updated>2018-09-13T09:39:15Z</updated><published>2018-09-11T00:00:00Z</published><content type="html">&lt;div&gt;&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Happy to announce 4.9.0.AM3 (Developer Milestone 3) build for Eclipse 2018-09 M2.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Downloads available at &lt;a href="https://tools.jboss.org/downloads/jbosstools/2018-09/4.9.0.AM3.html"&gt;JBoss Tools 4.9.0 AM3&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-is-new"&gt;&lt;a class="anchor" href="#what-is-new"&gt;&lt;/a&gt;What is New?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Full info is at &lt;a href="https://tools.jboss.org/documentation/whatsnew/jbosstools/4.9.0.AM3.html"&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="general"&gt;&lt;a class="anchor" href="#general"&gt;&lt;/a&gt;General&lt;/h3&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="server-tools"&gt;&lt;a class="anchor" href="#server-tools"&gt;&lt;/a&gt;Server Tools&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="wildfly-14-server-adapter"&gt;&lt;a class="anchor" href="#wildfly-14-server-adapter"&gt;&lt;/a&gt;Wildfly 14 Server Adapter&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A server adapter has been added to work with Wildfly 14. It adds support for Java EE 8.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="forge-tools"&gt;&lt;a class="anchor" href="#forge-tools"&gt;&lt;/a&gt;Forge Tools&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="forge-runtime-updated-to-3-9-1-final"&gt;&lt;a class="anchor" href="#forge-runtime-updated-to-3-9-1-final"&gt;&lt;/a&gt;Forge Runtime updated to 3.9.1.Final&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The included Forge runtime is now 3.9.1.Final. Read the official announcement &lt;a href="https://forge.jboss.org/news/jboss-forge-3.9.1.final-is-here"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="fuse-tooling"&gt;&lt;a class="anchor" href="#fuse-tooling"&gt;&lt;/a&gt;Fuse Tooling&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="know-issues"&gt;&lt;a class="anchor" href="#know-issues"&gt;&lt;/a&gt;Know issues&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A regression has been introduced touching all functionalities using Jaxb. It includes:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Variable content display in debug&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data Transformation wizard&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tracing Camel route via Jolokia Connection&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It may affect other functionalities. In this case, you will have this kind of error in log:&lt;/p&gt; &lt;/div&gt; &lt;div class="literalblock"&gt; &lt;div class="content"&gt; &lt;pre&gt;java.lang.NullPointerException at javax.xml.bind.ContextFinder.handleClassCastException(ContextFinder.java:95)&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Please note that it has been already fixed on &lt;a href="http://tools.jboss.org/downloads/jbosstools/2018-09/4.9.x.Nightly.html"&gt;nightly build&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Jeff Maury&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/jQMu0ePpWIA" height="1" width="1" alt=""/&gt;</content><summary>Happy to announce 4.9.0.AM3 (Developer Milestone 3) build for Eclipse 2018-09 M2. Downloads available at JBoss Tools 4.9.0 AM3. What is New? Full info is at this page. Some highlights are below. General Server Tools Wildfly 14 Server Adapter A server adapter has been added to work with Wildfly 14. It adds support for Java EE 8. Forge Tools Forge Runtime updated to 3.9.1.Final The included Forge runtime is now 3.9.1.Final. Read the official announcement here. Fuse Tooling Know issues A regression has been introduced touching all functionalities using Jaxb. It includes: Variable content display in debug Data Transformation wizard Tracing Camel route via Jolokia Connection It may affect other functionalities. In this case, you will have...</summary><dc:creator>jeffmaury</dc:creator><dc:date>2018-09-11T00:00:00Z</dc:date><feedburner:origLink>https://tools.jboss.org/blog/4.9.0.am3.html</feedburner:origLink></entry><entry><title>The rise of non-microservices architectures</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Baj6QBaxTnA/" /><category term="Architecture" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="miniservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="monolithic service" scheme="searchisko:content:tags" /><category term="self-contained system" scheme="searchisko:content:tags" /><author><name>Bilgin Ibryam</name></author><id>searchisko:content:id:jbossorg_blog-the_rise_of_non_microservices_architectures</id><updated>2018-09-10T13:25:24Z</updated><published>2018-09-10T13:25:24Z</published><content type="html">&lt;p&gt;This post is a short summary of my recent experiences with customers that are implementing architectures similar to microservices but with different characteristics in the current post-microservices world.&lt;/p&gt; &lt;p&gt;The microservices architectural style has been around for close to five years now, and much has been said and written about it. Today, I see teams deciding not to strictly follow certain principles of the &amp;#8220;pure&amp;#8221; microservices architecture and to break some of the &amp;#8220;rules.&amp;#8221; Teams are now more informed about the pros and cons of microservices, and they make context-driven decisions respecting team experience and organizational boundaries and accept the fact that not every company is Netflix. Below are some examples I have seen in my recent microservices gigs.&lt;/p&gt; &lt;p&gt;&lt;span id="more-517597"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;No premium in advance&lt;/h2&gt; &lt;p&gt;Teams (composed of devs, ops, testers, business analysts, architects, etc.) are becoming more and more aware of the&lt;a href="https://www.martinfowler.com/bliki/MicroservicePremium.html"&gt; premium&lt;/a&gt; they have to pay for the privilege of going to a pure microservices-based architecture. A typical Java-based microservice running on Kubernetes (the most popular microservices platform) will require a Git repository, a Maven module, a collection of tests (unit, integration, acceptance), APIs, Maven artifacts, container images, configurations, secure configurations, build pipelines, design, documentation, etc. At runtime, it will require CPU, memory, disk, networking, metrics aggregation, log aggregation, database, endpoints, service mesh proxy sidecar, etc. It will also need a collection of Kubernetes objects: container, volume, configmap, secret, pod, service, replica set, deployment, etc. Navigating and managing tens or hundreds of these artifacts puts a serious burden on everybody in a team. It&amp;#8217;s no surprise that recently ThoughtWorks announced it &lt;a href="https://www.thoughtworks.com/insights/blog/microservices-adopt"&gt;is not intending&lt;/a&gt; to put a microservices architecture into the &amp;#8220;adopting&amp;#8221; phase of its &lt;a href="https://www.thoughtworks.com/radar"&gt;Technology Radar&lt;/a&gt; in a foreseeable future.&lt;/p&gt; &lt;h2&gt;Raison d&amp;#8217;être&lt;/h2&gt; &lt;p&gt;Considering there is a cost per service (not envisaging the hidden premium), rather than the original &amp;#8220;start with tens of lines of code per service&amp;#8221;, systems start larger, they start as one service—as a mono repository—as long as the service belongs to one team. Then, for every service, there is a clearly identified reason with benefits justifying its existence as an independent microservice. There is a mandatory &amp;#8220;existence check&amp;#8221; before carving out a standalone service from the monolith. Below are a few very valid reasons for using or not using microservices.&lt;/p&gt; &lt;h3&gt;Breaking the bounded context&lt;/h3&gt; &lt;p&gt;While the most discussed method for decomposition into microservices is&lt;a href="https://martinfowler.com/bliki/BoundedContext.html"&gt; decomposition by bounded context&lt;/a&gt;, in practice there are many more reasons for creating microservices: decomposing by maturity, decomposing by data-access pattern (read versus write), decomposition by data source (rather than partitioning a data source per microservice, create a microservice per data source), aggregation for a derived functionality (create an orchestrating service for a few other services), aggregation for client convenience (such as the&lt;a href="https://samnewman.io/patterns/architectural/bff/"&gt; backend for frontend pattern&lt;/a&gt;), aggregation to aid system performance, etc.&lt;/p&gt; &lt;h3&gt;Shared data sources&lt;/h3&gt; &lt;p&gt;One of the fundamental principles of microservices is that every service has a separate data store. While in theory, this principle makes perfect sense, in practice, for brownfield projects, it is&lt;a href="http://blog.christianposta.com/microservices/the-hardest-part-about-microservices-data/"&gt; the hardest part about microservices&lt;/a&gt;, and it is not always worth the effort. That is especially true for integration projects where the data source is typically owned by a different team or company and cannot be partitioned to start with. It is still possible to benefit from having independent services sharing the same data store by acknowledging the future constraints caused by the data source level coupling.&lt;/p&gt; &lt;h2&gt;Fewer inflated expectations&lt;/h2&gt; &lt;p&gt;The good news is that teams are now making more-informed decisions rather than blindly trusting conference slides about microservices. In regards to Gartner&amp;#8217;s&lt;a href="https://en.wikipedia.org/wiki/Hype_cycle"&gt; hype cycle&lt;/a&gt;, after a couple of years of &amp;#8220;inflated expectations,&amp;#8221; the microservices architecture is heading (down) towards the &amp;#8220;trough of disillusionment&amp;#8221; stage where expectations are more aligned with the real benefits.&lt;/p&gt; &lt;div id="attachment_517627" style="width: 488px" class="wp-caption aligncenter"&gt;&lt;img class="wp-image-517627" src="https://developers.redhat.com/blog/wp-content/uploads/2018/09/Gartner_Hype_Cycle.svg_-300x195.png" alt="Hype cycle" width="478" height="311" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/09/Gartner_Hype_Cycle.svg_-300x195.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/09/Gartner_Hype_Cycle.svg_.png 640w" sizes="(max-width: 478px) 100vw, 478px" /&gt;&lt;p class="wp-caption-text"&gt;Hype cycle&lt;/p&gt;&lt;/div&gt; &lt;p&gt;From here on, the future is full of enlightenment and productivity—unless another cycle starts (such as serverless) before we reap the benefits of this one.&lt;/p&gt; &lt;h2&gt;Mutated microservices&lt;/h2&gt; &lt;p&gt;Microservices favor event-driven interactions and choreography over orchestration to decrease service coupling. But at the same time, we have seen projects like &lt;a href="https://github.com/uber/cadence"&gt;Cadence&lt;/a&gt; by Uber and &lt;a href="https://netflix.github.io/conductor/"&gt;Conductor&lt;/a&gt; by Netflix that were created specifically to orchestrate distributed long-running services as an alternative to the choreography approach.&lt;/p&gt; &lt;p&gt;&lt;a href="https://twitter.com/berndruecker"&gt;Bernd Ruecker&lt;/a&gt; has done a very good &lt;a href="https://qconnewyork.com/system/files/presentation-slides/complex_event_flows_in_distributed_systems_0.pdf"&gt;review&lt;/a&gt; of using events, orchestration, and workflow engines in distributed systems analyzing their real benefits versus their perceived benefits.&lt;/p&gt; &lt;p&gt;In a different post titled &lt;a href="https://www.infoq.com/articles/microservices-post-kubernetes"&gt;Microservices in a Post-Kubernetes Era&lt;/a&gt;, I also described what changes in the microservices architectural style are driven purely by Kubernetes and the cloud-native primitives.&lt;/p&gt; &lt;p&gt;There are also others who have written about non-microservices architectures such as&lt;a href="https://scs-architecture.org/"&gt; self-contained systems&lt;/a&gt;,&lt;a href="https://sdtimes.com/micro/difference-miniservice-microservice/"&gt; miniservices&lt;/a&gt;, &lt;a href="https://segment.com/blog/goodbye-microservices/"&gt;other alternatives&lt;/a&gt; that are better than pure microservices in certain contexts.&lt;/p&gt; &lt;p&gt;These alternatives provide good reasons for breaking away from pure microservices principles whenever the context requires it.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;The best architecture is the context-driven architecture where you take a well-understood architecture and adapt it your needs. You question every principle and every rule, and you are not afraid of breaking away from some of the prescriptive elements as long as you understand and accept the consequences. A good analogy is “The map is not the territory.” If the architecture is the map, the context is the territory.&lt;/p&gt; &lt;p&gt;&lt;a href="https://twitter.com/bibryam"&gt;Let me know&lt;/a&gt; which microservices rules you are breaking and if breaking those rules works better for you. Be brave.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F10%2Fthe-rise-of-non-microservices-architectures%2F&amp;#38;linkname=The%20rise%20of%20non-microservices%20architectures" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F10%2Fthe-rise-of-non-microservices-architectures%2F&amp;#38;linkname=The%20rise%20of%20non-microservices%20architectures" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F10%2Fthe-rise-of-non-microservices-architectures%2F&amp;#38;linkname=The%20rise%20of%20non-microservices%20architectures" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F10%2Fthe-rise-of-non-microservices-architectures%2F&amp;#38;linkname=The%20rise%20of%20non-microservices%20architectures" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F10%2Fthe-rise-of-non-microservices-architectures%2F&amp;#38;linkname=The%20rise%20of%20non-microservices%20architectures" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F10%2Fthe-rise-of-non-microservices-architectures%2F&amp;#38;linkname=The%20rise%20of%20non-microservices%20architectures" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F10%2Fthe-rise-of-non-microservices-architectures%2F&amp;#38;linkname=The%20rise%20of%20non-microservices%20architectures" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F10%2Fthe-rise-of-non-microservices-architectures%2F&amp;#38;linkname=The%20rise%20of%20non-microservices%20architectures" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F09%2F10%2Fthe-rise-of-non-microservices-architectures%2F&amp;#38;title=The%20rise%20of%20non-microservices%20architectures" data-a2a-url="https://developers.redhat.com/blog/2018/09/10/the-rise-of-non-microservices-architectures/" data-a2a-title="The rise of non-microservices architectures"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/09/10/the-rise-of-non-microservices-architectures/"&gt;The rise of non-microservices architectures&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Baj6QBaxTnA" height="1" width="1" alt=""/&gt;</content><summary>This post is a short summary of my recent experiences with customers that are implementing architectures similar to microservices but with different characteristics in the current post-microservices world. The microservices architectural style has been around for close to five years now, and much has been said and written about it. Today, I see teams deciding not to strictly follow certain princip...</summary><dc:creator>Bilgin Ibryam</dc:creator><dc:date>2018-09-10T13:25:24Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/09/10/the-rise-of-non-microservices-architectures/</feedburner:origLink></entry><entry><title>Tips on how to evaluate STM implementations</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fvyQVnjA9QQ/tips-on-how-to-evaluate-stm.html" /><category term="feed_group_name_jbosstransactions" scheme="searchisko:content:tags" /><category term="feed_name_transactions" scheme="searchisko:content:tags" /><author><name>Michael Musgrove</name></author><id>searchisko:content:id:jbossorg_blog-tips_on_how_to_evaluate_stm_implementations</id><updated>2018-09-09T19:12:45Z</updated><published>2018-09-09T19:12:00Z</published><content type="html">&lt;head&gt;&lt;link href="https://alexgorbatchev.com/pub/sh/current/styles/shCore.css" rel="stylesheet" type="text/css"&gt;&lt;/link&gt; &lt;link href="https://alexgorbatchev.com/pub/sh/current/styles/shThemeDefault.css" rel="stylesheet" type="text/css"&gt;&lt;/link&gt; &lt;script src="https://alexgorbatchev.com/pub/sh/current/scripts/shCore.js" type="text/javascript"&gt;&lt;/script&gt; &lt;script src="https://alexgorbatchev.com/pub/sh/current/scripts/shBrushCpp.js" type="text/javascript"&gt;&lt;/script&gt; &lt;script src="https://alexgorbatchev.com/pub/sh/current/scripts/shBrushCSharp.js" type="text/javascript"&gt;&lt;/script&gt; &lt;script src="https://alexgorbatchev.com/pub/sh/current/scripts/shBrushCss.js" type="text/javascript"&gt;&lt;/script&gt; &lt;script src="https://alexgorbatchev.com/pub/sh/current/scripts/shBrushJava.js" type="text/javascript"&gt;&lt;/script&gt; &lt;script src="https://alexgorbatchev.com/pub/sh/current/scripts/shBrushJScript.js" type="text/javascript"&gt;&lt;/script&gt; &lt;script src="https://alexgorbatchev.com/pub/sh/current/scripts/shBrushPhp.js" type="text/javascript"&gt;&lt;/script&gt; &lt;script src="https://alexgorbatchev.com/pub/sh/current/scripts/shBrushPython.js" type="text/javascript"&gt;&lt;/script&gt; &lt;script src="https://alexgorbatchev.com/pub/sh/current/scripts/shBrushRuby.js" type="text/javascript"&gt;&lt;/script&gt; &lt;script src="https://alexgorbatchev.com/pub/sh/current/scripts/shBrushSql.js" type="text/javascript"&gt;&lt;/script&gt; &lt;script src="https://alexgorbatchev.com/pub/sh/current/scripts/shBrushVb.js" type="text/javascript"&gt;&lt;/script&gt; &lt;script src="https://alexgorbatchev.com/pub/sh/current/scripts/shBrushXml.js" type="text/javascript"&gt;&lt;/script&gt; &lt;script src="https://alexgorbatchev.com/pub/sh/current/scripts/shBrushPerl.js" type="text/javascript"&gt;&lt;/script&gt; &lt;script language="javascript"&gt; SyntaxHighlighter.config.bloggerMode = true; SyntaxHighlighter.config.clipboardSwf = 'http://alexgorbatchev.com/pub/sh/current/scripts/clipboard.swf'; SyntaxHighlighter.all(); &lt;/script&gt;&lt;/head&gt; Software Transactional Memory (STM) is a way of providing transactional behaviour for threads operating on shared memory. The transaction is an atomic and isolated set of changes to memory such that prior to commit no other thread sees the memory updates and after commit the changes appear to take effect instantaneously so other threads never see partial updates but on abort all of the updates are discarded.&lt;br /&gt;&lt;br /&gt;Unlike other models such as XA, OTS, JTA, WS-AT etc, with STM there is no accepted standard for developers to program against. Consequently the various implementations of STM differ in important respects which have consequences for how application developers build their software. I recently came upon an excellent book on&amp;nbsp;&lt;a href="https://www.morganclaypool.com/doi/abs/10.2200/S00070ED1V01Y200611CAC002"&gt;Transactional Memory&lt;/a&gt;&amp;nbsp;where the authors James Larus and Ravi Rajwar presented a taxonomy of features and characteristics that can be used to differentiate the various STM implementations from each other. In this and subsequent blogs I will explain the taxonomy and identify where the &lt;b&gt;Narayana STM&lt;/b&gt; solution (which was introduced in Mark Little's &lt;a href="http://jbossts.blogspot.com/2011/06/stm-arjuna.html"&gt;initial blog on the topic&lt;/a&gt;)&amp;nbsp;fits into it. Towards the end of the series I will include some tips, best practices and advice on how you can get the most out of the Narayana implementation of STM.&lt;br /&gt;&lt;br /&gt;In this first article I will cover isolation, nesting and exception handling. In later articles I will discuss topics such as conflict detection and resolution, transaction granularity, concurrency control etc. &lt;br /&gt;&lt;br /&gt;By way of motivation, why would one want to use STM in favour of other transaction models and concurrency control mechanisms:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The STM approach of mutating data inside of a transaction has some nice features:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;It is less error prone since the demarcation of an atomic block of code is primitive but other synchronisation approaches are many and varied. Techniques such as locks, semaphores, signals etc are tricky to get right, for example the programmer must ensure that accesses are protected with the correct locks and in the correct order. With conventional concurrency control, imagine trying reverse all the changes made during a computation if a problem such as deadlock or data race is detected, whereas code changes that are protected by STM can be aborted in a single statement.&lt;/li&gt;&lt;li&gt;Transactional updates make it easier for the programmer to reason about his code (it is clear how different threads affect each other) and data (because it simplifies the sharing of state between threads).&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;The declarative approach (where the programmer simply marks which code blocks are transactional) means concurrent programming is more intuitive with no explicit locks or synchronisation to worry about.&lt;/li&gt;&lt;li&gt;Can perform much better than fine grained locking (which can lead to deadlock) and coarse grained locking (which inhibits concurrency):&lt;/li&gt;&lt;ul&gt;&lt;li&gt;If a thread takes a lock and is context switched or incurs cache misses or page faults etc then other threads that need the lock are stalled until the thread is rescheduled or until the needed data is retrieved.&lt;/li&gt;&lt;li&gt;With STM, updates can be batched up and speculatively committed together.&lt;/li&gt;&lt;li&gt;The runtime manages lock acquisition and release and resolves conflicts (using approaches such as timeouts and retries).&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;It is easier to compose operations&amp;nbsp;using a technique called nesting&amp;nbsp;(traditionally composing two operations can produce concurrency problems unless one analyses in detail the locking approach used by those operations).&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;h2&gt;Properties of a STM system&lt;/h2&gt;&lt;/div&gt;In the following I will describe the design choices available to STM systems in general and in particular I will illustrate the choices made by the&amp;nbsp;&lt;b&gt;Narayana STM&lt;/b&gt; implementation using code examples. The examples &lt;a href="https://issues.jboss.org/browse/JBTM-3058"&gt;will be made available&lt;/a&gt; in the &lt;b&gt;Narayana STM&lt;/b&gt; test suite so that you can also experiment with the particular properties of the implementation. Each of the examples will be using the same transactional object which is defined as follows:&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre class="brush: java"&gt; @Transactional&lt;br /&gt; public interface AtomicInt {&lt;br /&gt; int get() throws Exception;&lt;br /&gt; void set(int value) throws Exception;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public class AtomicIntImpl implements AtomicInt {&lt;br /&gt; private int state;&lt;br /&gt;&lt;br /&gt; @ReadLock&lt;br /&gt; public int get() throws Exception {&lt;br /&gt; return state;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @WriteLock&lt;br /&gt; public void set(int value) throws Exception {&lt;br /&gt; state = value;&lt;br /&gt; }&lt;br /&gt; }&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The @Transactional annotation on the AtomicInt interface tells the system that instances of the interface are candidates to be managed by the STM system. The implementation of the interface defines a pair of methods for reading and writing the the shared state (by default all state is tracked but this default can be overridden via the @NotState annotation).&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Property 1: Interaction with non transactional code&lt;/h3&gt;If uncommitted transactional memory updates are visible to non-transactional code and vice-versa (i.e. updates made by non-transactional code are visible to running transactions) then the isolation model is said to be weak. On the other hand if non-transactional accesses are upgraded to a transactional access then the model is said to be strong.&lt;br /&gt;&lt;br /&gt;The weak access model, although common, can lead to data races. A data race occurs if two threads T1 and T2 access memory, T1 for writing, say, and the other for reading then the value of the memory read is indeterminate. If, for example T1 writes data inside a transaction and T2 reads that data, then if T1 aborts but T2 has made a decision based on the value it read then we have an incorrect program since aborted transactions must not have side effects (recall the "all or nothing" characteristic of atomicity).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Narayana STM&lt;/b&gt; follows the weak isolation model. The following test updates shared memory inside a transaction and then triggers a thread to perform non-transactional reads and writes on it while the transaction is still running. The test shows that the two threads interfere with each other producing indeterminate results:&lt;br /&gt;&lt;pre class="brush: java"&gt; public void testWeakIsolation() throws Exception {&lt;br /&gt; AtomicIntImpl aiImple = new AtomicIntImpl();&lt;br /&gt; // STM is managed by Containers. Enlisting the above implementation&lt;br /&gt; // with the container returns a proxy which will enforce STM semantics&lt;br /&gt; AtomicInt ai = new RecoverableContainer&lt;atomicint&gt;().enlist(aiImple);&lt;br /&gt; AtomicAction tx = new AtomicAction();&lt;br /&gt;&lt;br /&gt; // set up the code that will access the memory outside of a transaction&lt;br /&gt; Thread ot = new Thread(() -&amp;gt; {&lt;br /&gt; try {&lt;br /&gt; synchronized (tx) {&lt;br /&gt; tx.wait(); // for the other thread to start a transaction&lt;br /&gt;&lt;br /&gt; // weak isolation implies that this thread (which is running&lt;br /&gt; // outside of a transaction) can observe transactional updates&lt;br /&gt; assertEquals(2, aiImple.get()); // the other thread set it to 2&lt;br /&gt; aiImple.set(10); // this update is visible to transactional code&lt;br /&gt; } catch (Exception e) {&lt;br /&gt; e.printStackTrace();&lt;br /&gt; }&lt;br /&gt; });&lt;br /&gt;&lt;br /&gt; ot.start();&lt;br /&gt;&lt;br /&gt; ai.set(1); // initialise the shared memory&lt;br /&gt; tx.begin(); // start a transaction&lt;br /&gt; {&lt;br /&gt; ai.set(2); // conditionally set the value to 2&lt;br /&gt;&lt;br /&gt; synchronized (tx) {&lt;br /&gt; tx.notify(); // trigger non-transactional code to update the memory&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; // weak isolation means that this transactional code may see the&lt;br /&gt; // changes made by the non transactional code&lt;br /&gt; assertEquals(10, ai.get()); // the other thread set it to 10&lt;br /&gt; tx.commit(); // commit the changes made to the shared memory&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; // changes made by non transactional code are still visible after commit&lt;br /&gt; assertEquals(10, ai.get());&lt;br /&gt; assertEquals(aiImple.get(), ai.get());&lt;br /&gt; }&lt;br /&gt;&lt;/atomicint&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;As an aside, notice in this example that the code first had to declare the shared data using the @Transactional annotation and then had to access it via a proxy returned from a RecoverableContainer. Some systems introduce new keywords into the language that demarcate the atomic blocks and in such systems any memory updates made by the atomic block would be managed by the STM implementation. That type of system takes some of the burden of ensuring correctness away from the programmer but are harder to implement (for example a common technique requires compiler extensions).&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Property 2: Nested transactions&lt;/h3&gt;&lt;div&gt;A nested transaction (the child) is one that is started in the context of an outer one (the parent). The child sees the changes made by the parent. Aborting the parent will abort each child. A parent that does not have any parents is called top level.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The effects of committing/aborting either transaction (the child or parent) and the visibility of changes depend upon which model is being used:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;Flattened:&lt;/h4&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;The parent and child transactions see each others updates.&lt;/li&gt;&lt;li&gt;If the child aborts the parent aborts too.&lt;/li&gt;&lt;li&gt;Changes made by the child only become visible to other threads when the parent commits&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Pros - easy to implement&lt;/div&gt;&lt;div&gt;Cons - breaks composition (if the child aborts it causes all work done by the parent transaction to abort)&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;Closed Nested&lt;/h4&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Changes are hidden from the parent transaction (and from other transactions) until the child commits, at which time any changes made by the child become part of the parent transactions' set of updates (therefore, in contrast to open nested transactions, other transactions will not see the updates until the parent commits);&lt;/li&gt;&lt;li&gt;aborting the child does not abort the parent;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;Pros - Is arguably the most natural model for application designers&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Open Nested&lt;/h4&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;When the child transaction commits, all other transactions&amp;nbsp;see the updates even if the parent aborts which is useful if we want unrelated code to make permanent changes during the transaction even if the parent aborts.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Pros - enables work to be made permanent even if the parent aborts (for example logging code made by the child)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;Narayana STM&lt;/b&gt; follows the closed model as is demonstrated by the following test case:&lt;/div&gt;&lt;pre class="brush: java"&gt; public void testIsClosedNestedCommit() throws Exception {&lt;br /&gt; AtomicInt ai = new RecoverableContainer&lt;atomicint&gt;().enlist(new AtomicIntImpl());&lt;br /&gt; AtomicAction parent = new AtomicAction();&lt;br /&gt; AtomicAction child = new AtomicAction();&lt;br /&gt;&lt;br /&gt; ai.set(1); // initialise the shared memory&lt;br /&gt; parent.begin(); // start a top level transaction&lt;br /&gt; {&lt;br /&gt; ai.set(2); // update the memory in the context of the parent transaction&lt;br /&gt; child.begin(); // start a child transaction&lt;br /&gt; {&lt;br /&gt; ai.set(3); // update the memory in a child transaction&lt;br /&gt; // NB the parent would still see the value as 2&lt;br /&gt; // (not shown in this test)&lt;br /&gt; child.commit();&lt;br /&gt; }&lt;br /&gt; // since the child committed the parent should see the value as 3&lt;br /&gt; assertEquals(3, ai.get());&lt;br /&gt; // NB other transactions would not see the value 3 however until&lt;br /&gt; // the parent commits (not demonstrated in this test)&lt;br /&gt; }&lt;br /&gt; parent.commit();&lt;br /&gt;&lt;br /&gt; assertEquals(3, ai.get());&lt;br /&gt; }&lt;br /&gt;&lt;/atomicint&gt;&lt;/pre&gt;&lt;h4&gt;Isolation amongst child transactions&lt;/h4&gt;&lt;div&gt;The concept of isolation applies to nested transactions as well as to top level transactions. It seems most natural for siblings to use the same model as is used for isolation with respect to other transactions (ie transactions that are not in ancestor hierarchy of a particular child). For example the CORBA Object Transaction Service (OTS) supports the closed model and children do not see each others updates until the parent commits.&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;Property 3: Exception Handling&lt;/h3&gt;&lt;div&gt;On exception the options are to either terminate or ignore the exception or to use a mixture of both where the programmer tells the system which exceptions should abort and which ones should commit the transaction which is similar to what the JTA 1.2 spec provides with its &lt;i&gt;rollbackOn&lt;/i&gt; and &lt;i&gt;dontRollbackOn&lt;/i&gt; annotation attributes.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The &lt;b&gt;Narayana STM&lt;/b&gt;&amp;nbsp;implementation takes the view that the programmer is best placed to make decisions about what to do under exceptional circumstances. The following test demonstrates this behaviour:&lt;br /&gt;&lt;pre class="brush: java"&gt; public void testExceptionDoesNotAbort() throws Exception {&lt;br /&gt; AtomicInt ai = new RecoverableContainer&lt;atomicint&gt;().enlist(new AtomicIntImpl());&lt;br /&gt; AtomicAction tx = new AtomicAction();&lt;br /&gt;&lt;br /&gt; ai.set(1);&lt;br /&gt; tx.begin();&lt;br /&gt; {&lt;br /&gt; try {&lt;br /&gt; ai.set(2);&lt;br /&gt; throw new Exception();&lt;br /&gt; } catch (Exception e) {&lt;br /&gt; assertEquals(2, ai.get());&lt;br /&gt; // the transaction should still be active&lt;br /&gt; ai.set(3);&lt;br /&gt; tx.commit();&lt;br /&gt; }&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; assertEquals(3, ai.get());&lt;br /&gt; }&lt;br /&gt;&lt;/atomicint&gt;&lt;/pre&gt;&lt;br /&gt;&lt;h2&gt;What's Next&lt;/h2&gt;That's all for this week. In the next instalment I will cover conflict detection and resolution, transaction granularity and concurrency control.&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fvyQVnjA9QQ" height="1" width="1" alt=""/&gt;</content><summary>Software Transactional Memory (STM) is a way of providing transactional behaviour for threads operating on shared memory. The transaction is an atomic and isolated set of changes to memory such that prior to commit no other thread sees the memory updates and after commit the changes appear to take effect instantaneously so other threads never see partial updates but on abort all of the updates are...</summary><dc:creator>Michael Musgrove</dc:creator><dc:date>2018-09-09T19:12:00Z</dc:date><feedburner:origLink>http://jbossts.blogspot.com/2018/09/tips-on-how-to-evaluate-stm.html</feedburner:origLink></entry></feed>
